<?php
namespace Tbx\Console;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;

/**
 * @author Michael Mifsud <info@tropotek.com>
 * @see http://www.tropotek.com/
 * @license Copyright 2017 Michael Mifsud
 */
class DbRestore extends Iface
{

    /**
     *
     */
    protected function configure()
    {
        $this->setName('dbRestore')
            ->setAliases(array('dbr'))

            ->addArgument('filename', InputArgument::REQUIRED, 'The Database backup file generated by tkDbBackup.')
            ->addOption('user', 'U', InputOption::VALUE_OPTIONAL, 'The database username.', 'dev')
            ->addOption('pass', 'P', InputOption::VALUE_OPTIONAL, 'The database password.', 'dev007')
            ->addOption('host', 'H', InputOption::VALUE_OPTIONAL, 'The database password.', 'localhost')
            ->addOption('type', 'M', InputOption::VALUE_OPTIONAL, 'The database type.', 'mysql')
            ->addOption('name', 'N', InputOption::VALUE_OPTIONAL, 'The database name to dump, if none then all available databases are dumped', '')

            // TODO: implement excludes when needed
            //->addOption('exclude', 'X', InputOption::VALUE_OPTIONAL, 'The database`s to exclude separated by a comma (,)', '')

            ->setDescription('Restore Databases backed up with the tkDbBackup command');
    }


    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int|null|void
     * @throws \Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        parent::execute($input, $output);

        $filename = $input->getArgument('filename');
        if (!is_file($filename) || \Tk\File::getExtension($filename) != 'tgz')
            throw new \Tk\Exception('This does not look like a valid tkDbBackup file!');

        $tempPath = sys_get_temp_dir().'/tk-dbRestore-'.getmyuid();
        $dirname = $tempPath . '/' . \Tk\File::removeExtension(basename($filename));    // Path to the sql files


        if ($input->getOption('name'))
            $tempPath = sys_get_temp_dir().'/'.$input->getOption('name').'-'.getmyuid();
        if (is_dir($tempPath))
            \Tk\File::rmdir($tempPath);

        if (!is_dir($tempPath))
            mkdir($tempPath, 0777, true);

        // extract backup sql files
        $cmd = sprintf('tar zxf %s -C %s ', $filename, $tempPath);
        $this->writeComment($cmd);
        system($cmd);



        $exclude = array('Database', 'information_schema', 'performance_schema', 'phpmyadmin', 'mysql', 'dbispconfig', 'roundcube');
        // loop through all sql files and backup if table does not exist
        foreach (new \DirectoryIterator($dirname) as $fileInfo) {
            if($fileInfo->isDot()) continue;
            $dbName = \Tk\File::removeExtension($fileInfo->getFilename());
            if (in_array($dbName, $exclude)) continue;
            try {
                $this->writeComment('  Restoring ' . $dbName . ' [' . $fileInfo->getFilename() . ']:');
                $options = $input->getOptions();
                $db = \Tk\Db\Pdo::create($options);
                if ($db->hasDatabase($dbName)) {
                    $db->setDatabase($dbName);
                    try {
                        if (count($db->getTableList()) > 0) {
                            $this->writeInfo('  Skipped. (DB Exists)');
                            continue;
                        }
                    } catch (\Exception $e) {
                        $this->writeInfo('  Skipped. (DB Connection Error)');
                    }
                }

                $db->query('CREATE DATABASE IF NOT EXISTS ' . $dbName);
                $db->setDatabase($dbName);
                \Tk\Util\SqlBackup::create($db)->restore($fileInfo->getPathname());

                $this->writeComment('  Restore Complete');
            } catch (\Exception $e) {
                \Tk\Log::error('Error Restoring: ' . $dbName);
                \Tk\Log::error($e->__toString());
                $this->writeError('  Restore Failed');
            }
        }


        if (!$this->getConfig()->isDebug())
            \Tk\File::rmdir($tempPath);
    }

}
